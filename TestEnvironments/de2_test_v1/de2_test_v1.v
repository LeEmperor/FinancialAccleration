
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module de2_test_v1(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,

	//////////// LED //////////
	output		     [8:0]		LEDG,
	output		    [17:0]		LEDR,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		    [17:0]		SW,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,
	output		     [6:0]		HEX6,
	output		     [6:0]		HEX7,

	//////////// Ethernet 0 //////////
	output		          		ENET0_GTX_CLK,
	input 		          		ENET0_INT_N,
	input 		          		ENET0_LINK100,
	output		          		ENET0_MDC,
	inout 		          		ENET0_MDIO,
	output		          		ENET0_RST_N,
	input 		          		ENET0_RX_CLK,
	input 		          		ENET0_RX_COL,
	input 		          		ENET0_RX_CRS,
	input 		     [3:0]		ENET0_RX_DATA,
	input 		          		ENET0_RX_DV,
	input 		          		ENET0_RX_ER,
	input 		          		ENET0_TX_CLK,
	output		     [3:0]		ENET0_TX_DATA,
	output		          		ENET0_TX_EN,
	output		          		ENET0_TX_ER,
	input 		          		ENETCLK_25
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

assign ENET0_GTX_CLK = 1'b0;

wire user_clk = CLOCK_50;
wire user_rst = SW[17];

wire [31:0] wire_mac_data_in; // control -> MAC
wire [31:0] wire_mac_data_out; // MAC -> control
wire [7:0] wire_mac_addr; // control -> MAC control module addr

wire wire_mac_busy;
wire wire_mac_rd_en;
wire wire_mac_wr_en;

wire [31:0] wire_eth_avalon_data_out;
wire [31:0] wire_eth_avalon_data_in;
wire        wire_eth_avalon_valid;
wire        wire_eth_avalon_ready;
wire        wire_eth_avalon_sop;
wire        wire_eth_avalon_eop;

//=======================================================
//  Structural coding
//=======================================================

// tester module
funky_v1 funky_instantiation (
  .a(SW[0]),
  .b(SW[1]),
  .c(LEDG[0])
);

// sink
test_sink_v1 # (
  .WIDTH(32)
) test_sink1 (
  .clk(user_clk),
  .rst(user_rst),

  .button0(KEY[0]),
  .button1(KEY[1]),
  .LEDS(LEDR[15:0]),

  .data(wire_eth_avalon_data_out),
  .ready(wire_eth_avalon_ready),
  .valid(wire_eth_avalon_valid),
  .sop(wire_eth_avalon_sop),
  .eop(wire_eth_avalon_eop),
  .empty()
);

// configuration module
tse_config_v1 # (
  .WIDTH(64)
) configurator (
  .clk(user_clk),
  .rst(user_rst),
  .reg_data_out(wire_mac_data_out),
  .reg_data_in(wire_mac_data_in),
  .reg_busy(wire_mac_busy),
  .reg_addr(wire_mac_addr),
  .reg_rd(wire_mac_rd_en),
  .reg_wr(wire_mac_wr_en),

  // config bits
  .data_mac(),
  .data_config(),
  .addr_mac_lo(),
  .addr_mac_hi(),
  .addr_config()
);

// eth ip MAC
triple_eth_v1 eth0_instantiation (
  // control lines
  .clk(user_clk),
  .reset(user_rst),
  .reg_addr(wire_mac_addr),
  .reg_data_out(wire_mac_data_out),
  .reg_data_in(wire_mac_data_in),
  .reg_rd(wire_mac_rd_en),
  .reg_wr(wire_mac_wr_en),
  .reg_busy(wire_mac_busy),

  // line clocks
  .tx_clk(ENET0_TX_CLK),
  .rx_clk(ENET0_RX_CLK),

  // speed hints / modes
  .set_10(1'b1),
  .set_1000(1'b0),
  .eth_mode(),
  .ena_10(),

  // Megabit Interface to PHY pins
  .m_rx_d(ENET0_RX_DATA),
  .m_rx_en(ENET0_RX_EN),
  .m_rx_err(ENET0_RX_ER),
  .m_rx_crs(ENET0_RX_CRS),
  .m_rx_col(ENET0_RX_COL),

  .m_tx_d(ENET0_TX_DATA),
  .m_tx_en(ENET0_TX_EN),
  .m_tx_err(ENET0_TX_ER),

  // Avalon Interface
  .ff_rx_clk(user_clk),
  .ff_rx_data(wire_eth_avalon_data_out),
  .ff_rx_sop(wire_eth_avalon_sop),
  .ff_rx_eop(wire_eth_avalon_eop),
  .ff_rx_dval(wire_eth_avalon_valid),
  .ff_rx_rdy(wire_eth_avalon_ready),
  .ff_rx_err(),
  .ff_rx_mod(),             // data coming out of the MAC (receiving from upstream)

  .ff_tx_clk(user_clk),
  .ff_tx_data(wire_eth_avalon_data_in),
  .ff_tx_eop(),
  .ff_tx_err(),
  .ff_tx_mod(),               // data going to the MAC (going to upstream)
  .ff_tx_rdy(),
  .ff_tx_sop(),
  .ff_tx_wren(),

  // random garbage
  .ff_tx_crc_fwd(1'b0)
);

endmodule

