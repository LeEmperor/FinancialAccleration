
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module de2_test_v1(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,

	//////////// LED //////////
	output		     [8:0]		LEDG,
	output		    [17:0]		LEDR,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		    [17:0]		SW,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,
	output		     [6:0]		HEX6,
	output		     [6:0]		HEX7,

	//////////// Ethernet 0 //////////
	output		          		ENET0_GTX_CLK,
	input 		          		ENET0_INT_N,
	input 		          		ENET0_LINK100,
	output		          		ENET0_MDC,
	inout 		          		ENET0_MDIO,
	output		          		ENET0_RST_N,
	input 		          		ENET0_RX_CLK,
	input 		          		ENET0_RX_COL,
	input 		          		ENET0_RX_CRS,
	input 		     [3:0]		ENET0_RX_DATA,
	input 		          		ENET0_RX_DV,
	input 		          		ENET0_RX_ER,
	input 		          		ENET0_TX_CLK,
	output		     [3:0]		ENET0_TX_DATA,
	output		          		ENET0_TX_EN,
	output		          		ENET0_TX_ER,
	input 		          		ENETCLK_25
);



//=======================================================
//  REG/WIRE declarations
//=======================================================


wire user_clk = CLOCK_50;

//=======================================================
//  Structural coding
//=======================================================

funky_v1 funky_instantiation (
  .a(SW[0]),
  .b(SW[1]),
  .c(LEDG[0])
);

triple_eth_v1 eth0_instantiation (
  // control lines
  .clk(user_clk),
  .reset(),
  .reg_addr(),
  .reg_data_out(),
  .reg_rd(),
  .reg_data_in(),
  .reg_wr(),
  .reg_busy(),

  // line clocks
  .tx_clk(ENET0_TX_CLK),
  .rx_clk(ENET0_RX_CLK),

  // speed hints / modes
  .set_10(),
  .set_1000(),
  .eth_mode(),
  .ena_10(),

  // Megabit Interface to PHY pins
  .m_rx_d(),
  .m_rx_en(),
  .m_rx_err(),
  .m_tx_d(),
  .m_tx_en(),
  .m_tx_err(),
  .m_rx_crs(),
  .m_rx_col(),

  // Avalon Interface
  .ff_rx_clk(),
  .ff_rx_data(),
  .ff_rx_eop(),
  .rx_err(),
  .ff_rx_mod(),
  .ff_rx_rdy(),
  .ff_rx_sop(),
  .ff_rx_dval(),
  .ff_rx_data(),

  .ff_tx_clk(),
  .ff_tx_data(),
  .ff_tx_eop(),
  .ff_tx_err(),
  .ff_tx_mod(),
  .ff_tx_rdy(),
  .ff_tx_sop(),
  .ff_tx_wren(),

  // random garbage
  .ff_tx_crc_fwd(1'b0)
);

endmodule

